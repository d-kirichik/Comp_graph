#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <GLFW/glfw3.h>
#include <linmath.h>
#include "gluPerspective.h"

float alpha = 0;
float temp[16];
vec3 rotation_axis = {0.f, 0.f, 0.f};

void controls(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if(action == GLFW_PRESS && key == GLFW_KEY_ESCAPE)
            glfwSetWindowShouldClose(window, GL_TRUE);
    if(action == GLFW_PRESS && key == GLFW_KEY_LEFT){
        alpha -= 5;
	    rotation_axis[0] = 0.f;
        rotation_axis[1] = 1.f;
        rotation_axis[2] = 0.f;
    }
    if(action == GLFW_PRESS && key == GLFW_KEY_RIGHT){
        alpha += 5;
	    rotation_axis[0] = 0.f;
        rotation_axis[1] = 1.f;
        rotation_axis[2] = 0.f;
    }
    if(action == GLFW_PRESS && key == GLFW_KEY_UP){
        alpha -= 5;
	    rotation_axis[0] = 1.f;
        rotation_axis[1] = 0.f;
        rotation_axis[2] = 0.f;
    } 
    if(action == GLFW_PRESS && key == GLFW_KEY_DOWN){
        alpha += 5;
	    rotation_axis[0] = 1.f;
        rotation_axis[1] = 0.f;
        rotation_axis[2] = 0.f;
    }
}

GLFWwindow* initWindow()
{
    if(!glfwInit()){
        fprintf(stderr, "Failed to initialize GLFW\n");
        return NULL;
    }
    
    GLFWwindow* window = glfwCreateWindow(640, 480, "Lab2", NULL, NULL);
    
    if(window == NULL){
        fprintf(stderr, "Failed to open GLFW window.\n");
        glfwTerminate();
        return NULL;
    }
    
    glfwMakeContextCurrent(window);
    glfwSetKeyCallback(window, controls);
    
    
    glEnable(GL_DEPTH_TEST); 
    return window;
}

void drawCube(){
    
    glRotatef(alpha,rotation_axis[0],rotation_axis[1], rotation_axis[2]);
    
    glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 1.0);
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(-0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, -0.5f);
    glEnd();
 
    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 1.0);
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);
    glVertex3f(-0.5f, -0.5f, 0.5f);
    glEnd();
 
    glBegin(GL_POLYGON);
    glColor3f(0.1, 1.0, 0.1);
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(-0.5f, -0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, -0.5f);
    glEnd();
 
    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex3f(-0.5f, -0.5f, 0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);
    glEnd();
 
    glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);
    glVertex3f(-0.5f, 0.5f, -0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);
    glEnd();
 
    glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 0.0);
    glVertex3f(0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);
    glEnd();
 
    glFlush();
}

void display( GLFWwindow* window )
{
    while(!glfwWindowShouldClose(window))
    {
        // Scale to window size
        int windowWidth, windowHeight;
        glfwGetWindowSize(window, &windowWidth, &windowHeight);
        glViewport(0, 0, windowWidth, windowHeight);
        
        // Draw stuff
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        
        glMatrixMode(GL_PROJECTION_MATRIX);
        glLoadIdentity();
        gluPerspective(temp, 80, (double)windowWidth / (double)windowHeight, 0.1, 500 );
        glLoadMatrixf(temp);     
        glMatrixMode(GL_MODELVIEW_MATRIX);
        glTranslatef(0,0,-5);
        
        drawCube();
        
        // Update Screen
        glfwSwapBuffers(window);
        
        // Check for any input, or window movement
        glfwPollEvents();
    }
}

int main(int argc, char** argv)
{
    GLFWwindow* window = initWindow(1024, 768);
    if( NULL != window )
    {
        display( window );
    }
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}
